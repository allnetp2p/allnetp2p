(()=>{"use strict";class e{constructor(){if(globalThis.onmessage)throw new Error("globalThis.onmessage is already set. You should only initialize AnWorkerApi once per web worker.");globalThis.onmessage=e=>{this._handleMessage(e.data)},this._pending=new Map}rawEvent(e,t,s){globalThis.postMessage({type:e,dir:"evt",data:t},s)}rawRequest(e,t,s){const r=((e=21)=>{let t="",s=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&s[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?"_":"-"}return t})();return globalThis.postMessage({type:e,dir:"req",msgId:r,data:t},s),new Promise(((e,t)=>{this._pending.set(r,[e,t]),setTimeout((()=>{const e=this._pending.get(r);this._pending.delete(r),e&&e[1](new Error("timeout"))}),3e4)}))}async registerModule(e){await this.rawRequest("registerModule",e)}_handleMessage(e){if("res"!==e.dir)throw new Error("dir "+e.dir+" not yet handled");{const t=this._pending.get(e.msgId);this._pending.delete(e.msgId),t&&(e.error?t[1](e.error):t[0](e.data))}}}(async()=>{console.log(e,typeof e,Object.keys(e));const t=new e;await t.registerModule("system.allnetp2p.broker@0.0.1"),console.log("BROKER WORKER REGISTER SUCCESS")})().then((()=>{}),(e=>{console.error(e)}))})();
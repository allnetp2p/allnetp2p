(()=>{"use strict";var e={742:(e,r)=>{r.b$=function(e){var r,t,a=function(e){var r=e.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var t=e.indexOf("=");return-1===t&&(t=r),[t,t===r?0:4-t%4]}(e),s=a[0],i=a[1],l=new n(function(e,r,t){return 3*(r+t)/4-t}(0,s,i)),c=0,d=i>0?s-4:s;for(t=0;t<d;t+=4)r=o[e.charCodeAt(t)]<<18|o[e.charCodeAt(t+1)]<<12|o[e.charCodeAt(t+2)]<<6|o[e.charCodeAt(t+3)],l[c++]=r>>16&255,l[c++]=r>>8&255,l[c++]=255&r;return 2===i&&(r=o[e.charCodeAt(t)]<<2|o[e.charCodeAt(t+1)]>>4,l[c++]=255&r),1===i&&(r=o[e.charCodeAt(t)]<<10|o[e.charCodeAt(t+1)]<<4|o[e.charCodeAt(t+2)]>>2,l[c++]=r>>8&255,l[c++]=255&r),l},r.JQ=function(e){for(var r,o=e.length,n=o%3,a=[],s=16383,i=0,c=o-n;i<c;i+=s)a.push(l(e,i,i+s>c?c:i+s));return 1===n?(r=e[o-1],a.push(t[r>>2]+t[r<<4&63]+"==")):2===n&&(r=(e[o-2]<<8)+e[o-1],a.push(t[r>>10]+t[r>>4&63]+t[r<<2&63]+"=")),a.join("")};for(var t=[],o=[],n="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,i=a.length;s<i;++s)t[s]=a[s],o[a.charCodeAt(s)]=s;function l(e,r,o){for(var n,a,s=[],i=r;i<o;i+=3)n=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),s.push(t[(a=n)>>18&63]+t[a>>12&63]+t[a>>6&63]+t[63&a]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},500:e=>{e.exports='(()=>{"use strict";class e{constructor(){if(globalThis.onmessage)throw new Error("globalThis.onmessage is already set. You should only initialize AnWorkerApi once per web worker.");globalThis.onmessage=e=>{this._handleMessage(e.data)},this._pending=new Map}rawEvent(e,t,s){globalThis.postMessage({type:e,dir:"evt",data:t},s)}rawRequest(e,t,s){const r=((e=21)=>{let t="",s=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&s[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?"_":"-"}return t})();return globalThis.postMessage({type:e,dir:"req",msgId:r,data:t},s),new Promise(((e,t)=>{this._pending.set(r,[e,t]),setTimeout((()=>{const e=this._pending.get(r);this._pending.delete(r),e&&e[1](new Error("timeout"))}),3e4)}))}async registerModule(e){await this.rawRequest("registerModule",e)}_handleMessage(e){if("res"!==e.dir)throw new Error("dir "+e.dir+" not yet handled");{const t=this._pending.get(e.msgId);this._pending.delete(e.msgId),t&&(e.error?t[1](e.error):t[0](e.data))}}}(async()=>{console.log(e,typeof e,Object.keys(e));const t=new e;await t.registerModule("system.allnetp2p.broker@0.0.1"),console.log("BROKER WORKER REGISTER SUCCESS")})().then((()=>{}),(e=>{console.error(e)}))})();'}},r={};function t(o){var n=r[o];if(void 0!==n)return n.exports;var a=r[o]={exports:{}};return e[o](a,a.exports,t),a.exports}(()=>{var e=t(742);function r(e){return new Promise(((r,t)=>{e.oncomplete=e.onsuccess=()=>r(e.result),e.onabort=e.onerror=()=>t(e.error)}))}let o;function n(){return o||(o=function(e,t){const o=(!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent)&&indexedDB.databases?new Promise((function(e){var r=function(){return indexedDB.databases().finally(e)};n=setInterval(r,100),r()})).finally((function(){return clearInterval(n)})):Promise.resolve()).then((()=>{const e=indexedDB.open("keyval-store");return e.onupgradeneeded=()=>e.result.createObjectStore(t),r(e)}));var n;return(e,r)=>o.then((o=>r(o.transaction(t,e).objectStore(t))))}(0,"keyval")),o}var a=t(500);(async()=>{console.log("@@-loader-@@ - broker source: ",a);const t=new Blob([a],{type:"application/javascript"});console.log("@@-loader-@@ - broker blob: ",t);const o=URL.createObjectURL(t);console.log("@@-loader-@@ - broker url: ",o);const s=new Worker(o);URL.revokeObjectURL(o),console.log("@@-loader-@@ - broker worker: ",s),s.onmessage=e=>{const r=e.data;"registerModule"===r.type?s.postMessage({dir:"res",msgId:r.msgId}):s.postMessage({dir:"res",msgId:r.msgId,error:"unhandled req type: "+r.type})};const i=await async function(){const e=(new TextEncoder).encode("passphrase");console.log("@@-loader-@@ - passphraseRaw: ",e);const r=await crypto.subtle.importKey("raw",e.buffer,"PBKDF2",!1,["deriveKey"]);return console.log("@@-loader-@@ - passphrase: ",r),r}(),l=await async function(t){const o="P-384",a=await(async()=>{try{return await function(e,t=n()){return t("readonly",(t=>r(t.get(e))))}("signKeypair")}catch{return null}})();if(!a)return console.log("@@-loader-@@ - no keypair in db, GENERATING NEW"),await async function(t){const o="SHA-512",a=2e5,s=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-384"},!0,["sign","verify"]);console.log("@@-loader-@@ - signKeypair: ",s);const i=crypto.getRandomValues(new Uint8Array(24)),l=Date.now(),c=await crypto.subtle.deriveKey({name:"PBKDF2",hash:o,salt:i,iterations:a},t,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"]),d=Date.now();console.log("@@-loader-@@ - secretKey (in",d-l,"ms): ",c);const u=crypto.getRandomValues(new Uint8Array(24)),p=await crypto.subtle.wrapKey("jwk",s.privateKey,c,{name:"AES-GCM",iv:u,tagLength:128});console.log("@@-loader-@@ - savePrivKey: ",p);const g=await crypto.subtle.exportKey("jwk",s.publicKey);console.log("@@-loader-@@ - savePubKey: ",g);const y={pbkdf2HashAlgo:o,pbkdf2Iterations:a,pbkdf2Salt:e.JQ(i),aesGcmIv:e.JQ(u),privateKey:e.JQ(new Uint8Array(p)),publicKey:g};return console.log("@@-loader-@@ - signKeypairEnc: ",y),await function(e,t,o=n()){return o("readwrite",(o=>(o.put(t,e),r(o.transaction))))}("signKeypair",y),{privateKey:s.privateKey,publicKey:s.publicKey,publicKeyJwk:y.publicKey}}(t);console.log("@@-loader-@@ - loaded stored keypair: ",a);const s=e.b$(a.pbkdf2Salt),i=Date.now(),l=await crypto.subtle.deriveKey({name:"PBKDF2",hash:a.pbkdf2HashAlgo,salt:s,iterations:a.pbkdf2Iterations},t,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"]),c=Date.now();console.log("@@-loader-@@ - secretKey (in",c-i,"ms): ",l);const d=e.b$(a.aesGcmIv),u=await crypto.subtle.unwrapKey("jwk",e.b$(a.privateKey),l,{name:"AES-GCM",iv:d,tagLength:128},{name:"ECDSA",namedCurve:o},!0,["sign"]);console.log("@@-loader-@@ - signPrivKey: ",u);return{privateKey:u,publicKey:await crypto.subtle.importKey("jwk",a.publicKey,{name:"ECDSA",namedCurve:o},!0,["verify"]),publicKeyJwk:a.publicKey}}(i);console.log("SIGN KEYPAIR IDENTITY",l)})().then((()=>{}),(e=>{console.error(e)}))})()})();